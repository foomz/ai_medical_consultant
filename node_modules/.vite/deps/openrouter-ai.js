import "./chunk-V4OQ3NZ2.js";

// node_modules/eventsource-parser/dist/index.js
function createParser(onParse) {
  let isFirstChunk;
  let buffer;
  let startingPosition;
  let startingFieldLength;
  let eventId;
  let eventName;
  let data;
  reset();
  return {
    feed,
    reset
  };
  function reset() {
    isFirstChunk = true;
    buffer = "";
    startingPosition = 0;
    startingFieldLength = -1;
    eventId = void 0;
    eventName = void 0;
    data = "";
  }
  function feed(chunk) {
    buffer = buffer ? buffer + chunk : chunk;
    if (isFirstChunk && hasBom(buffer)) {
      buffer = buffer.slice(BOM.length);
    }
    isFirstChunk = false;
    const length = buffer.length;
    let position = 0;
    let discardTrailingNewline = false;
    while (position < length) {
      if (discardTrailingNewline) {
        if (buffer[position] === "\n") {
          ++position;
        }
        discardTrailingNewline = false;
      }
      let lineLength = -1;
      let fieldLength = startingFieldLength;
      let character;
      for (let index = startingPosition; lineLength < 0 && index < length; ++index) {
        character = buffer[index];
        if (character === ":" && fieldLength < 0) {
          fieldLength = index - position;
        } else if (character === "\r") {
          discardTrailingNewline = true;
          lineLength = index - position;
        } else if (character === "\n") {
          lineLength = index - position;
        }
      }
      if (lineLength < 0) {
        startingPosition = length - position;
        startingFieldLength = fieldLength;
        break;
      } else {
        startingPosition = 0;
        startingFieldLength = -1;
      }
      parseEventStreamLine(buffer, position, fieldLength, lineLength);
      position += lineLength + 1;
    }
    if (position === length) {
      buffer = "";
    } else if (position > 0) {
      buffer = buffer.slice(position);
    }
  }
  function parseEventStreamLine(lineBuffer, index, fieldLength, lineLength) {
    if (lineLength === 0) {
      if (data.length > 0) {
        onParse({
          type: "event",
          id: eventId,
          event: eventName || void 0,
          data: data.slice(0, -1)
          // remove trailing newline
        });
        data = "";
        eventId = void 0;
      }
      eventName = void 0;
      return;
    }
    const noValue = fieldLength < 0;
    const field = lineBuffer.slice(index, index + (noValue ? lineLength : fieldLength));
    let step = 0;
    if (noValue) {
      step = lineLength;
    } else if (lineBuffer[index + fieldLength + 1] === " ") {
      step = fieldLength + 2;
    } else {
      step = fieldLength + 1;
    }
    const position = index + step;
    const valueLength = lineLength - step;
    const value = lineBuffer.slice(position, position + valueLength).toString();
    if (field === "data") {
      data += value ? "".concat(value, "\n") : "\n";
    } else if (field === "event") {
      eventName = value;
    } else if (field === "id" && !value.includes("\0")) {
      eventId = value;
    } else if (field === "retry") {
      const retry = parseInt(value, 10);
      if (!Number.isNaN(retry)) {
        onParse({
          type: "reconnect-interval",
          value: retry
        });
      }
    }
  }
}
var BOM = [239, 187, 191];
function hasBom(buffer) {
  return BOM.every((charCode, index) => buffer.charCodeAt(index) === charCode);
}

// node_modules/openrouter-ai/node_modules/nanoid/non-secure/index.js
var customAlphabet = (alphabet, defaultSize = 21) => {
  return (size = defaultSize) => {
    let id = "";
    let i = size;
    while (i--) {
      id += alphabet[Math.random() * alphabet.length | 0];
    }
    return id;
  };
};

// node_modules/openrouter-ai/dist/index.mjs
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};
function createEventStreamTransformer(customParser) {
  const textDecoder = new TextDecoder();
  let eventSourceParser;
  return new TransformStream({
    start(controller) {
      return __async(this, null, function* () {
        eventSourceParser = createParser(
          (event) => {
            if ("data" in event && event.type === "event" && event.data === "[DONE]") {
              controller.terminate();
              return;
            }
            if ("data" in event) {
              const parsedMessage = customParser(event.data);
              if (parsedMessage)
                controller.enqueue(parsedMessage);
            }
          }
        );
      });
    },
    transform(chunk) {
      eventSourceParser.feed(textDecoder.decode(chunk));
    }
  });
}
function createCallbacksTransformer(callbacks) {
  const textEncoder = new TextEncoder();
  let aggregatedResponse = "";
  const { onStart, onToken, onCompletion } = callbacks || {};
  return new TransformStream({
    start() {
      return __async(this, null, function* () {
        if (onStart)
          yield onStart();
      });
    },
    transform(message, controller) {
      return __async(this, null, function* () {
        controller.enqueue(textEncoder.encode(message));
        if (onToken)
          yield onToken(message);
        if (onCompletion)
          aggregatedResponse += message;
      });
    },
    flush() {
      return __async(this, null, function* () {
        if (onCompletion)
          yield onCompletion(aggregatedResponse);
      });
    }
  });
}
function trimStartOfStreamHelper() {
  let isStreamStart = true;
  return (text) => {
    if (isStreamStart) {
      text = text.trimStart();
      if (text)
        isStreamStart = false;
    }
    return text;
  };
}
function AIStream(response, customParser, callbacks) {
  if (!response.ok) {
    if (response.body) {
      let _a;
      const reader = response.body.getReader();
      return new ReadableStream({
        start(controller) {
          return __async(this, null, function* () {
            const { done, value } = yield reader.read();
            if (!done) {
              const errorText = new TextDecoder().decode(value);
              controller.error(new Error(`Response error: ${errorText}`));
            }
          });
        }
      });
    } else {
      return new ReadableStream({
        start(controller) {
          controller.error(new Error("Response error: No response body"));
        }
      });
    }
  }
  const responseBodyStream = response.body || createEmptyReadableStream();
  return responseBodyStream.pipeThrough(createEventStreamTransformer(customParser)).pipeThrough(createCallbacksTransformer(callbacks));
}
function createEmptyReadableStream() {
  return new ReadableStream({
    start(controller) {
      controller.close();
    }
  });
}
function parseOpenAIStream() {
  const trimStartOfStream = trimStartOfStreamHelper();
  let isFunctionStreamingIn;
  return (data) => {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o;
    const json = JSON.parse(data);
    if ((_c = (_b = (_a = json.choices[0]) == null ? void 0 : _a.delta) == null ? void 0 : _b.function_call) == null ? void 0 : _c.name) {
      isFunctionStreamingIn = true;
      return `{"function_call": {"name": "${(_e = (_d = json.choices[0]) == null ? void 0 : _d.delta) == null ? void 0 : _e.function_call.name}", "arguments": "`;
    } else if ((_h = (_g = (_f = json.choices[0]) == null ? void 0 : _f.delta) == null ? void 0 : _g.function_call) == null ? void 0 : _h.arguments) {
      const argumentChunk = json.choices[0].delta.function_call.arguments;
      let escapedPartialJson = argumentChunk.replace(/\\/g, "\\\\").replace(/\//g, "\\/").replace(/"/g, '\\"').replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/\t/g, "\\t").replace(/\f/g, "\\f");
      return `${escapedPartialJson}`;
    } else if ((((_i = json.choices[0]) == null ? void 0 : _i.finish_reason) === "function_call" || ((_j = json.choices[0]) == null ? void 0 : _j.finish_reason) === "stop") && isFunctionStreamingIn) {
      isFunctionStreamingIn = false;
      return '"}}';
    }
    const text = trimStartOfStream(
      (_o = (_n = (_l = (_k = json.choices[0]) == null ? void 0 : _k.delta) == null ? void 0 : _l.content) != null ? _n : (_m = json.choices[0]) == null ? void 0 : _m.text) != null ? _o : ""
    );
    return text;
  };
}
var __internal__OpenAIFnMessagesSymbol = Symbol("internal_openai_fn_messages");
function OpenAIStream(res, callbacks) {
  const cb = callbacks;
  const stream = AIStream(res, parseOpenAIStream(), cb);
  if (cb && cb.experimental_onFunctionCall) {
    const functionCallTransformer = createFunctionCallTransformer(cb);
    return stream.pipeThrough(functionCallTransformer);
  } else {
    return stream;
  }
}
function createFunctionCallTransformer(callbacks) {
  const textEncoder = new TextEncoder();
  let isFirstChunk = true;
  let aggregatedResponse = "";
  let isFunctionStreamingIn = false;
  let functionCallMessages = callbacks[__internal__OpenAIFnMessagesSymbol] || [];
  return new TransformStream({
    transform(chunk, controller) {
      return __async(this, null, function* () {
        const message = new TextDecoder().decode(chunk);
        const shouldHandleAsFunction = isFirstChunk && message.startsWith('{"function_call":');
        if (shouldHandleAsFunction) {
          isFunctionStreamingIn = true;
          aggregatedResponse += message;
          isFirstChunk = false;
          return;
        }
        if (!isFunctionStreamingIn) {
          controller.enqueue(chunk);
          return;
        } else {
          aggregatedResponse += message;
        }
      });
    },
    flush(controller) {
      return __async(this, null, function* () {
        const isEndOfFunction = !isFirstChunk && callbacks.experimental_onFunctionCall && isFunctionStreamingIn;
        if (isEndOfFunction && callbacks.experimental_onFunctionCall) {
          isFunctionStreamingIn = false;
          const payload = JSON.parse(aggregatedResponse);
          const argumentsPayload = JSON.parse(payload.function_call.arguments);
          let newFunctionCallMessages = [...functionCallMessages];
          const functionResponse = yield callbacks.experimental_onFunctionCall(
            {
              name: payload.function_call.name,
              arguments: argumentsPayload
            },
            (result) => {
              newFunctionCallMessages = [
                ...functionCallMessages,
                {
                  role: "assistant",
                  content: "",
                  function_call: payload.function_call
                },
                {
                  role: "function",
                  name: payload.function_call.name,
                  content: JSON.stringify(result)
                }
              ];
              return newFunctionCallMessages;
            }
          );
          if (!functionResponse) {
            controller.enqueue(textEncoder.encode(aggregatedResponse));
            return;
          } else if (typeof functionResponse === "string") {
            controller.enqueue(textEncoder.encode(functionResponse));
            return;
          }
          const filteredCallbacks = __spreadProps(__spreadValues({}, callbacks), {
            onStart: void 0,
            onCompletion: void 0
          });
          const openAIStream = OpenAIStream(functionResponse, __spreadProps(__spreadValues({}, filteredCallbacks), {
            [__internal__OpenAIFnMessagesSymbol]: newFunctionCallMessages
          }));
          const reader = openAIStream.getReader();
          while (true) {
            const { done, value } = yield reader.read();
            if (done) {
              break;
            }
            controller.enqueue(value);
          }
        }
      });
    }
  });
}
var StreamingTextResponse = class extends Response {
  constructor(res, init) {
    super(res, __spreadProps(__spreadValues({}, init), {
      status: 200,
      headers: __spreadValues({
        "Content-Type": "text/plain; charset=utf-8"
      }, init == null ? void 0 : init.headers)
    }));
  }
};
function streamToResponse(res, response, init) {
  response.writeHead((init == null ? void 0 : init.status) || 200, __spreadValues({
    "Content-Type": "text/plain; charset=utf-8"
  }, init == null ? void 0 : init.headers));
  const reader = res.getReader();
  function read() {
    reader.read().then(({ done, value }) => {
      if (done) {
        response.end();
        return;
      }
      response.write(value);
      read();
    });
  }
  read();
}
function createParser2(res) {
  const trimStartOfStream = trimStartOfStreamHelper();
  return new ReadableStream({
    pull(controller) {
      return __async(this, null, function* () {
        var _a2, _b;
        const { value, done } = yield res.next();
        if (done) {
          controller.close();
          return;
        }
        const text = trimStartOfStream((_b = (_a2 = value.token) == null ? void 0 : _a2.text) != null ? _b : "");
        if (!text)
          return;
        if (value.generated_text != null && value.generated_text.length > 0) {
          controller.close();
          return;
        }
        if (text === "</s>" || text === "<|endoftext|>" || text === "<|end|>") {
          controller.close();
        } else {
          controller.enqueue(text);
        }
      });
    }
  });
}
function HuggingFaceStream(res, callbacks) {
  return createParser2(res).pipeThrough(createCallbacksTransformer(callbacks));
}
var utf8Decoder = new TextDecoder("utf-8");
function processLines(lines, controller) {
  return __async(this, null, function* () {
    for (const line of lines) {
      const { text, is_finished } = JSON.parse(line);
      if (is_finished === true) {
        controller.close();
      } else {
        controller.enqueue(text);
      }
    }
  });
}
function readAndProcessLines(reader, controller) {
  return __async(this, null, function* () {
    let segment = "";
    while (true) {
      const { value: chunk, done } = yield reader.read();
      if (done) {
        break;
      }
      segment += utf8Decoder.decode(chunk, { stream: true });
      const linesArray = segment.split(/\r\n|\n|\r/g);
      segment = linesArray.pop() || "";
      yield processLines(linesArray, controller);
    }
    if (segment) {
      const linesArray = [segment];
      yield processLines(linesArray, controller);
    }
    controller.close();
  });
}
function createParser3(res) {
  var _a;
  const reader = (_a = res.body) == null ? void 0 : _a.getReader();
  return new ReadableStream({
    start(controller) {
      return __async(this, null, function* () {
        if (!reader) {
          controller.close();
          return;
        }
        yield readAndProcessLines(reader, controller);
      });
    }
  });
}
function CohereStream(reader, callbacks) {
  return createParser3(reader).pipeThrough(createCallbacksTransformer(callbacks));
}
function parseAnthropicStream() {
  let previous = "";
  return (data) => {
    const json = JSON.parse(data);
    const text = json.completion;
    const delta = text.slice(previous.length);
    previous = text;
    return delta;
  };
}
function AnthropicStream(res, cb) {
  return AIStream(res, parseAnthropicStream(), cb);
}
function LangChainStream(callbacks) {
  const stream = new TransformStream();
  const writer = stream.writable.getWriter();
  const runs = /* @__PURE__ */ new Set();
  const handleError = (e, runId) => __async(this, null, function* () {
    runs.delete(runId);
    yield writer.ready;
    yield writer.abort(e);
  });
  const handleStart = (runId) => __async(this, null, function* () {
    runs.add(runId);
  });
  const handleEnd = (runId) => __async(this, null, function* () {
    runs.delete(runId);
    if (runs.size === 0) {
      yield writer.ready;
      yield writer.close();
    }
  });
  return {
    stream: stream.readable.pipeThrough(createCallbacksTransformer(callbacks)),
    handlers: {
      handleLLMNewToken: (token) => __async(this, null, function* () {
        yield writer.ready;
        yield writer.write(token);
      }),
      handleLLMStart: (_llm, _prompts, runId) => __async(this, null, function* () {
        handleStart(runId);
      }),
      handleLLMEnd: (_output, runId) => __async(this, null, function* () {
        yield handleEnd(runId);
      }),
      handleLLMError: (e, runId) => __async(this, null, function* () {
        yield handleError(e, runId);
      }),
      handleChainStart: (_chain, _inputs, runId) => __async(this, null, function* () {
        handleStart(runId);
      }),
      handleChainEnd: (_outputs, runId) => __async(this, null, function* () {
        yield handleEnd(runId);
      }),
      handleChainError: (e, runId) => __async(this, null, function* () {
        yield handleError(e, runId);
      }),
      handleToolStart: (_tool, _input, runId) => __async(this, null, function* () {
        handleStart(runId);
      }),
      handleToolEnd: (_output, runId) => __async(this, null, function* () {
        yield handleEnd(runId);
      }),
      handleToolError: (e, runId) => __async(this, null, function* () {
        yield handleError(e, runId);
      })
    }
  };
}
var nanoid = customAlphabet(
  "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz",
  7
);
function createChunkDecoder() {
  const decoder = new TextDecoder();
  return function(chunk) {
    if (!chunk)
      return "";
    return decoder.decode(chunk, { stream: true });
  };
}
export {
  AIStream,
  AnthropicStream,
  CohereStream,
  HuggingFaceStream,
  LangChainStream,
  OpenAIStream,
  StreamingTextResponse,
  createCallbacksTransformer,
  createChunkDecoder,
  createEventStreamTransformer,
  nanoid,
  streamToResponse,
  trimStartOfStreamHelper
};
//# sourceMappingURL=openrouter-ai.js.map
